/**
 * @module config/database
 * 
 * @Description Configuraci√≥n para conexi√≥n con base de datos, mysql/promise abre pool de conexi√≥n para la BD, recibe query y devuelve response como objeto.
 */

const mysql = require('mysql2/promise');
const config = require('./../config.js');


//! Generamos conexi√≥n
let connection;

/**
 * Conecta a la base de datos MySQL utilizando configuraci√≥n del archivo config.js.
 * En caso de error o p√©rdida de conexi√≥n, intenta reconectar autom√°ticamente.
 *
 * @async
 * @function connectToDatabase
 */
const connectToDatabase = async () => {
    try {
        const conn = await mysql.createConnection({
            host: config.host,
            port: config.port,
            database: config.database,
            user: config.user,
            password: config.password,
            connectTimeout: 10000
        });

        console.log('‚úÖ Conexi√≥n exitosa a la base de datos');
        connection = conn;

        // Reconexi√≥n autom√°tica si se pierde la conexi√≥n
        connection.on('error', (err) => {
            if (err.code === 'PROTOCOL_CONNECTION_LOST') {
                console.warn('üîå Conexi√≥n perdida. Reintentando...');
                setTimeout(connectToDatabase, 5000);
            } else {
                console.error('‚ùå Error en conexi√≥n:', err.message);
            }
        });

    } catch (err) {
        console.error('‚ùå Error al conectar a la base de datos:', err.message);
        setTimeout(connectToDatabase, 5000); // Reintentar conexi√≥n
    }
};

connectToDatabase();

/**
 * Retorna la conexi√≥n activa con la base de datos.
 * Si no existe, espera y reintenta hasta obtenerla (m√°x. 5 intentos).
 *
 * @async
 * @function getConnection
 * @returns {Promise<Connection>} Conexi√≥n activa a MySQL.
 */
const getConnection = async () => {
    if (connection) return connection;

    // Si no hay conexi√≥n, espera un poco e intenta de nuevo
    return new Promise((resolve, reject) => {
        const waitAndCheck = async () => {
            if (connection) {
                resolve(connection);
            } else if (tries > 5) {
                reject(new Error('No hay conexi√≥n activa con la base de datos'));
            } else {
                tries++;
                setTimeout(waitAndCheck, 1000); // Revisa cada segundo
            }
        };

        let tries = 0;
        waitAndCheck();
    });
};

module.exports = { getConnection };
